/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name: Crestron Germany
System Name:
System Number:
Programmer: MH
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #ENABLE_DYNAMIC
#SYMBOL_NAME "Analog 32 64 bit Serial Converter v1.2"
// #HINT ""
// #DEFINE_CONSTANT
// #CATEGORY "" 
// #PRINT_TO_TRACE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
// #OUTPUT_SHIFT 
#HELP_PDF_FILE "Analog 32 64 bit Serial Converter v1.2 Helpfile.pdf"
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
// #ENCODING_ASCII
// #ENCODING_UTF16
// #ENCODING_INHERIT_FROM_PARENT
// #ENCODING_INHERIT_FROM_PROGRAM

/*
#HELP_BEGIN
#HELP_END
*/

/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional libraries as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""
#USER_SIMPLSHARP_LIBRARY "IntToStringConverter"

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT 	_SKIP_, _SKIP_, _SKIP_, Convert;
ANALOG_INPUT	_SKIP_, value[4,2];
// STRING_INPUT 
// BUFFER_INPUT 

// DIGITAL_OUTPUT 
// ANALOG_OUTPUT 
STRING_OUTPUT	_SKIP_, _SKIP_, _SKIP_, valuestring;

/*******************************************************************************************
  Parameters
  (Uncomment and declare parameters as needed)
*******************************************************************************************/
INTEGER_PARAMETER sign, fractional_digits;
// SIGNED_INTEGER_PARAMETER
// LONG_INTEGER_PARAMETER
// SIGNED_LONG_INTEGER_PARAMETER
STRING_PARAMETER	appendix[50];

/*******************************************************************************************
  Parameter Properties
  (Uncomment and declare parameter properties as needed)
*******************************************************************************************/

#BEGIN_PARAMETER_PROPERTIES sign
   	propValidUnits = unitDecimal;
	propList = { 0d , "unsigned" } , { 1d , "signed" } ;
#END_PARAMETER_PROPERTIES
                          
#BEGIN_PARAMETER_PROPERTIES fractional_digits
   	propValidUnits = unitDecimal;
   	propBounds = 0d , 18d;
   	propDefaultValue = 0d;
#END_PARAMETER_PROPERTIES

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
INTEGER	value_32_or_64, NumInputs;
// LONG_INTEGER
// SIGNED_INTEGER
// SIGNED_LONG_INTEGER
// STRING

/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/
/*
Function MyFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here
}
*/

/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/
 
myConverter Converter;

PUSH Convert
{
	if(NumInputs = 2 || NumInputs = 4)
	{
		if(value_32_or_64 = 0)
		{
			if(fractional_digits <= 9)
			{
				valuestring = Converter.convertIntToString32(value[2], value[1], sign, fractional_digits) + " " + appendix;
			}
			else
			{
               	Trace("With the 32bit Converter you can just choose max 9 fractional_digits");
			}
		}
		else
		{
			valuestring = Converter.convertIntToString64(value[4], value[3], value[2], value[1], sign, fractional_digits) + " " + appendix;		
		}
	}
	else
	{
		Trace("You just can convert 2x16bit or 4x16bit values");
	}
}

/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/

Function Main()
{
	WaitforInitializationComplete();

	value_32_or_64 = 0;

	for(NumInputs = 4 TO 1 STEP -1)
	{
    	if(IsSignalDefined(value[NumInputs]))
		{
        	Break;
		}
	}

	if(NumInputs = 2)
	{
		value_32_or_64 = 0;		//32bit
	}
	else
	{
		value_32_or_64 = 1;		//64bit
	}		
}

